Lucas Baptista 

A) Qual é a ideia geral do projeto?
Resposta: Desevolver um projeto de previsão do tempo, aonde o usuário vai falar qual cidade que deseja que a previsão do tempo seja mostrada, e a IA irá responder com a previsão do tempo daquele momento na cidade.
B) Qual as tecnologias utilizadas, e porque?
Resposta: HTML E CSS, JavaScript, foram utilizadas para a parte do front-end do projeto, por mais que ela seja basica, retorna a imagem da previsão, por exemplo de estiver sol, ao fundo ele mostrará uma imagem de sol,como linguegem de programação foi utulziado o python por ser visto na matéria e ter muitas bibliotecas para o desevolvimento com inteligencia artificial. Foi utiliazado também o flask para ligação do back com front. Como API, foi utilizada a OpenWether como retornar a previsão do tempo do local desejado. 

C) Qual a arquitetura do software? Quem é o back, o front, como se comunicam, etc
Resposta: O back-end foi construído com Python utilizando bibliotecas como SpeechRecognition, Pyttsx3, Flask e Requests e o front feito com Javascript, Html e Css. Os 2 códigos estão se comunicando por meio de requisições HTTP, com uma API e rotas criadas com o Flask para conseguir se comunicar com o front. Por exemplo, quando a rota '/process_audio' é acessada pelo front, recebendo as informações do reconhecimento de voz gerado pelo front e a função process_audio é executada após a rota ser acessada.

D) Explicar os diretórios do projeto, mostrando as responsabilidades técnicas de cada um.
Resposta: Os arquivos estão separados em uma pasta static e template, na pasta static devem ir os arquivos estaticos como o arquivo css, um arquivo JS (caso não estivesse sendo aplicado diretamente no arquivo html e a pasta templates para armazenar os arquivos html. Foi necessário utilizar a estrutura das pastas assim para que o flask conseguisse reconhecer os arquivos.
E) Explicar o código dos principais arquivos do projeto. Ex: No backend, de for python/dart/js, explicar os métodos e funcionalidades. No frontend, de for flutter/html/react, explicar os principais componentes.
Resposta: No Python: A função SpeakText utiliza o pyttsx3 pra transformar um comando em voz, ela recebe um comando que caso não seja para "desligar", é utilizado o método .out para transcrever o comando em voz. A função get_weather basicamente está fazendo uma request para a API do OpenWeatherMap, recebendo o nome da cidade como entrada e fazendo a requisição para obter os dados de tempo. 
No JavaScript: Foi utilizada a biblioteca webSkitSpeechRecognition para reconhecer voz no navegador e também foi feito um tratamento para retirar caracteres especiais dos nomes da cidade, para que possa possível fazer as requests sem ter uma letra cortada nas urls, depois de ter os caractéres limpos, é enviado uma request POST para a rota /process_audio criada pelo Flask e uma para a API OpenWeather para receber a resposta e conseguir manipular o front como o texto exibido em tela e os diferentes backgrounds da tela.

F) Por fim, explicar o passo-a-passo para a execução do projeto. 
Reposta: O ambiente foi configurado conforme em aula e seguindo os slides passados em aula, após isso, utilizamos o código que utilizava pyttsx3 e speech recognition que também foi passado em aula e acrescentado o requests para fazer as requisições que precisaríamos e o Flask foi a opção que descobrimos pois a interface que optamos fazer foi com HTML e CSS por já estarmos familiarizados. Procuramos algumas APIs e também buscamos ideias do que poderíamos fazer com o reconhecimento de voz, gostamos da ideia da consulta de tempo e achamos a API OpenWeatherMap que para o propósito do trabalho a opção gratuita já era o suficiente e utilizamos apenas o básico do que vinha de resposta, como a temperatura na cidade e a definição de tempo básica (Neve, céu limpo, chuva e etc).
